// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `src/taglib_ffi.h`.
/// export CPATH="$(clang -v 2>&1 | grep "Selected GCC installation" | rev | cut -d' ' -f1 | rev)/include"
/// Regenerate bindings with `flutter pub run ffigen --config ffigen.yaml`.
///
class TaglibFfiBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  TaglibFfiBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  TaglibFfiBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<Tag> readTag(
    ffi.Pointer<ffi.Char> filePath,
  ) {
    return _readTag(
      filePath,
    );
  }

  late final _readTagPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<Tag> Function(ffi.Pointer<ffi.Char>)>>(
      'readTag');
  late final _readTag = _readTagPtr
      .asFunction<ffi.Pointer<Tag> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ID3v2Tag> readID3v2Tag(
    ffi.Pointer<ffi.Char> filePath,
  ) {
    return _readID3v2Tag(
      filePath,
    );
  }

  late final _readID3v2TagPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ID3v2Tag> Function(
              ffi.Pointer<ffi.Char>)>>('readID3v2Tag');
  late final _readID3v2Tag = _readID3v2TagPtr
      .asFunction<ffi.Pointer<ID3v2Tag> Function(ffi.Pointer<ffi.Char>)>();

  void freeTag(
    ffi.Pointer<Tag> tag,
  ) {
    return _freeTag(
      tag,
    );
  }

  late final _freeTagPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Tag>)>>(
          'freeTag');
  late final _freeTag =
      _freeTagPtr.asFunction<void Function(ffi.Pointer<Tag>)>();

  void freeID3v2Tag(
    ffi.Pointer<ID3v2Tag> id3V2Tag,
  ) {
    return _freeID3v2Tag(
      id3V2Tag,
    );
  }

  late final _freeID3v2TagPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ID3v2Tag>)>>(
          'freeID3v2Tag');
  late final _freeID3v2Tag =
      _freeID3v2TagPtr.asFunction<void Function(ffi.Pointer<ID3v2Tag>)>();

  /// Only use for debug.
  void printID3v2Tag(
    ffi.Pointer<ID3v2Tag> tag,
  ) {
    return _printID3v2Tag(
      tag,
    );
  }

  late final _printID3v2TagPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ID3v2Tag>)>>(
          'printID3v2Tag');
  late final _printID3v2Tag =
      _printID3v2TagPtr.asFunction<void Function(ffi.Pointer<ID3v2Tag>)>();
}

final class Tag extends ffi.Struct {
  external ffi.Pointer<ffi.Char> filePath;

  external ffi.Pointer<ffi.Char> fileName;

  external ffi.Pointer<ffi.Char> title;

  external ffi.Pointer<ffi.Char> artist;

  external ffi.Pointer<ffi.Char> albumTitle;

  external ffi.Pointer<ffi.Char> albumArtist;

  @ffi.UnsignedInt()
  external int year;

  @ffi.UnsignedInt()
  external int track;

  @ffi.Int()
  external int albumTotalTrack;

  external ffi.Pointer<ffi.Char> genre;

  external ffi.Pointer<ffi.Char> comment;

  @ffi.Int()
  external int bitRate;

  @ffi.Int()
  external int sampleRate;

  @ffi.Int()
  external int channels;

  @ffi.Int()
  external int lengthInSeconds;

  @ffi.Int()
  external int lengthInMilliseconds;

  /// The `_owner` field is an internal member who really owns the strings in
  /// current `Tag`. DO NOT MODIFY it except free;
  external ffi.Pointer<ffi.Void> _owner;
}

final class ID3v2Tag extends ffi.Struct {
  external ffi.Pointer<ffi.Char> filePath;

  external ffi.Pointer<ffi.Char> fileName;

  external ffi.Pointer<ffi.Char> title;

  external ffi.Pointer<ffi.Char> artist;

  external ffi.Pointer<ffi.Char> albumTitle;

  external ffi.Pointer<ffi.Char> albumArtist;

  @ffi.UnsignedInt()
  external int year;

  @ffi.UnsignedInt()
  external int track;

  @ffi.Int()
  external int albumTotalTrack;

  external ffi.Pointer<ffi.Char> genre;

  external ffi.Pointer<ffi.Char> comment;

  @ffi.Int()
  external int bitRate;

  @ffi.Int()
  external int sampleRate;

  @ffi.Int()
  external int channels;

  @ffi.Int()
  external int lengthInSeconds;

  @ffi.Int()
  external int lengthInMilliSeconds;

  external ffi.Pointer<ffi.Char> lyrics;

  @ffi.UnsignedLong()
  external int lyricsLength;

  external ffi.Pointer<ffi.Char> albumCover;

  @ffi.UnsignedInt()
  external int albumCoverLength;

  /// The `_owner` field is an internal member who really owns the strings in
  /// current `Tag`. DO NOT MODIFY it except free;
  external ffi.Pointer<ffi.Void> _owner;
}
